# -*- coding: utf-8 -*-
"""ViT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13xyeU9Bp8V9294TC7zxbAKhh_m5T8J0u

## downloading the data set
"""

# note: i'll fix this later i was having issues w the dataloader and kaggle file so i just directly uploaded them here
from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d xhlulu/leafsnap-dataset
!unzip leafsnap-dataset.zip

"""# Set up the data loader

creating the dataset and dataloader
"""

# it wasnt working so im manually uploading it
from google.colab import files
files.upload()

"""imports"""

from dataloader import *

import os
import torch
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
# from dataloader import LeafsnapDataset

"""define image transformations"""

# transformer
transform = transforms.Compose([
    transforms.Resize((224, 224)),  # Resize images
    transforms.ToTensor(),  # Convert images to tensors
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])  # Normalize
])

"""# building data loader

inialize the data set
"""

root_directory = "/content/leafsnap-dataset/"
image_paths_file = root_directory + "leafsnap-dataset-images.txt"

dataset = LeafsnapDataset(image_paths_file, root_directory, use_segmented=False, transform=transform)

"""build the dataloader"""

dataloader = DataLoader(dataset, batch_size=32, shuffle=True, num_workers=2)

"""verifying that the dataloader is workin [debugging to see what it shows]

"""

data_iter = iter(dataloader)
images, labels = next(data_iter)
print(f"Batch size: {images.shape}, Labels: {labels}")

"""## Vision Transformer (ViT) implementation

install needed libraries
"""

!pip install torch torchvision timm

"""load pre-trained ViT model"""

import timm
import torch.nn as nn
## defining the vision transformer
class ViTLeafClassifier(nn.Module):
    def __init__(self, num_classes=185):
        super(ViTLeafClassifier, self).__init__()
        self.vit = timm.create_model('vit_base_patch16_224', pretrained=True)  # Load ViT with pre-trained weights
        self.vit.head = nn.Linear(self.vit.head.in_features, num_classes)  # Modify classifier for 185 leaf classes

    def forward(self, x):
        return self.vit(x)

"""# Train the model"""

# i have trained it like 3 times already and it randomly crashes or my laptop does, i will finish training in a bit and push again ik colab hates me rn
# training loop
# Define the device
import torch
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Initialize model, loss function, and optimizer
model = ViTLeafClassifier(num_classes=185).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.AdamW(model.parameters(), lr=3e-4, weight_decay=1e-4)

# Training loop
num_epochs = 10  # Adjust as needed
print(f"\n Starting Training on {device}\n")

for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    correct = 0
    total = 0

    print(f"\n Epoch {epoch+1}/{num_epochs}")

    for batch_idx, (images, labels) in enumerate(dataloader):
        images, labels = images.to(device), labels.to(device)

        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()

        # Track accuracy
        _, predicted = torch.max(outputs, 1)
        correct += (predicted == labels).sum().item()
        total += labels.size(0)

        # Print updates every 10 batches
        if (batch_idx + 1) % 10 == 0 or batch_idx == 0:
            print(f"  Batch {batch_idx+1}/{len(dataloader)} | Loss: {loss.item():.4f} | Running Avg Loss: {running_loss / (batch_idx + 1):.4f}")

    epoch_loss = running_loss / len(dataloader)
    epoch_acc = 100 * correct / total
    print(f"\n Epoch {epoch+1} Finished - Avg Loss: {epoch_loss:.4f} | Accuracy: {epoch_acc:.2f}%")

print("\n Training Complete!")

"""# Evaluating the model"""

# top-1 accuracy, top-5 accuracy, and macro f1
from sklearn.metrics import accuracy_score, f1_score
import torch

model.eval()
all_preds = []
all_labels = []
top5_correct = 0
total_samples = 0

with torch.no_grad():
    for images, labels in dataloader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)

        #Top-1 Predictions
        _, top1_preds = torch.max(outputs, 1)
        all_preds.extend(top1_preds.cpu().numpy())
        all_labels.extend(labels.cpu().numpy())

        # Top-5 Accuracy
        top5_preds = torch.topk(outputs, k=5, dim=1).indices  # Get top-5 indices
        top5_correct += torch.sum(top5_preds.eq(labels.view(-1, 1)))  # Count correct top-5
        total_samples += labels.size(0)

#Calculate Metrics
top1_accuracy = accuracy_score(all_labels, all_preds)
top5_accuracy = top5_correct.item() / total_samples
macro_f1 = f1_score(all_labels, all_preds, average='macro')

print(f"Top-1 Accuracy: {top1_accuracy:.4f}") # 60.45
print(f"Top-5 Accuracy: {top5_accuracy:.4f}") # 88.53
print(f"Macro F1 Score: {macro_f1:.4f}") # 59.03

"""saving"""

torch.save(model.state_dict(), "vit_leafsnap.pth")